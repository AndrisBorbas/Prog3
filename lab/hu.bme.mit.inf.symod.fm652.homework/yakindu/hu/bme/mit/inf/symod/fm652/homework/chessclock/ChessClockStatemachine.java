/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.inf.symod.fm652.homework.chessclock;

import hu.bme.mit.inf.symod.fm652.homework.ITimer;

public class ChessClockStatemachine implements IChessClockStatemachine {
	protected class SCIButtonsImpl implements SCIButtons {
	
		private boolean modeButton;
		
		
		public void raiseModeButton() {
			modeButton = true;
		}
		
		private boolean startButton;
		
		
		public void raiseStartButton() {
			startButton = true;
		}
		
		private boolean blackButton;
		
		
		public void raiseBlackButton() {
			blackButton = true;
		}
		
		private boolean whiteButton;
		
		
		public void raiseWhiteButton() {
			whiteButton = true;
		}
		
		protected void clearEvents() {
			modeButton = false;
			startButton = false;
			blackButton = false;
			whiteButton = false;
		}
	}
	
	
	protected class SCIBeeperImpl implements SCIBeeper {
	
		private SCIBeeperOperationCallback operationCallback;
		
		public void setSCIBeeperOperationCallback(
				SCIBeeperOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
	}
	
	
	protected class SCIDisplayImpl implements SCIDisplay {
	
		private String text;
		
		public String getText() {
			return text;
		}
		
		public void setText(String value) {
			this.text = value;
		}
		
		private long whiteDisplay;
		
		public long getWhiteDisplay() {
			return whiteDisplay;
		}
		
		public void setWhiteDisplay(long value) {
			this.whiteDisplay = value;
		}
		
		private long blackDisplay;
		
		public long getBlackDisplay() {
			return blackDisplay;
		}
		
		public void setBlackDisplay(long value) {
			this.blackDisplay = value;
		}
		
	}
	
	
	protected SCIButtonsImpl sCIButtons;
	
	protected SCIBeeperImpl sCIBeeper;
	
	protected SCIDisplayImpl sCIDisplay;
	
	private boolean initialized = false;
	
	public enum State {
		__White_Begins,
		__White_initial_time,
		__Black_initial_time,
		__Increment_time,
		__Ready_to_play,
		__white_Moves,
		__white_Moves_white_White,
		__white_Moves_white_White_lost,
		__black_Moves,
		__black_Moves_black_Black,
		__black_Moves_black_Black_lost,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	
	private long whiteTime;
	
	protected long getWhiteTime() {
		return whiteTime;
	}
	
	protected void setWhiteTime(long value) {
		this.whiteTime = value;
	}
	
	
	private long blackTime;
	
	protected long getBlackTime() {
		return blackTime;
	}
	
	protected void setBlackTime(long value) {
		this.blackTime = value;
	}
	
	
	private long increment;
	
	protected long getIncrement() {
		return increment;
	}
	
	protected void setIncrement(long value) {
		this.increment = value;
	}
	
	
	private boolean whiteBegins;
	
	protected boolean getWhiteBegins() {
		return whiteBegins;
	}
	
	protected void setWhiteBegins(boolean value) {
		this.whiteBegins = value;
	}
	
	
	private String begins;
	
	protected String getBegins() {
		return begins;
	}
	
	protected void setBegins(String value) {
		this.begins = value;
	}
	
	
	public ChessClockStatemachine() {
		sCIButtons = new SCIButtonsImpl();
		sCIBeeper = new SCIBeeperImpl();
		sCIDisplay = new SCIDisplayImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCIBeeper.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCIBeeper must be set.");
		}
		
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCIDisplay.setText("Chess Clock");
		
		sCIDisplay.setWhiteDisplay(90);
		
		sCIDisplay.setBlackDisplay(90);
		
		setWhiteTime(150);
		
		setBlackTime(150);
		
		setIncrement(10);
		
		setWhiteBegins(true);
		
		setBegins("White begins");
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence___default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case __White_Begins:
				__White_Begins_react(true);
				break;
			case __White_initial_time:
				__White_initial_time_react(true);
				break;
			case __Black_initial_time:
				__Black_initial_time_react(true);
				break;
			case __Increment_time:
				__Increment_time_react(true);
				break;
			case __Ready_to_play:
				__Ready_to_play_react(true);
				break;
			case __white_Moves_white_White:
				__white_Moves_white_White_react(true);
				break;
			case __white_Moves_white_White_lost:
				__white_Moves_white_White_lost_react(true);
				break;
			case __black_Moves_black_Black:
				__black_Moves_black_Black_react(true);
				break;
			case __black_Moves_black_Black_lost:
				__black_Moves_black_Black_lost_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence__();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCIButtons.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case __White_Begins:
			return stateVector[0] == State.__White_Begins;
		case __White_initial_time:
			return stateVector[0] == State.__White_initial_time;
		case __Black_initial_time:
			return stateVector[0] == State.__Black_initial_time;
		case __Increment_time:
			return stateVector[0] == State.__Increment_time;
		case __Ready_to_play:
			return stateVector[0] == State.__Ready_to_play;
		case __white_Moves:
			return stateVector[0].ordinal() >= State.
					__white_Moves.ordinal()&& stateVector[0].ordinal() <= State.__white_Moves_white_White_lost.ordinal();
		case __white_Moves_white_White:
			return stateVector[0] == State.__white_Moves_white_White;
		case __white_Moves_white_White_lost:
			return stateVector[0] == State.__white_Moves_white_White_lost;
		case __black_Moves:
			return stateVector[0].ordinal() >= State.
					__black_Moves.ordinal()&& stateVector[0].ordinal() <= State.__black_Moves_black_Black_lost.ordinal();
		case __black_Moves_black_Black:
			return stateVector[0] == State.__black_Moves_black_Black;
		case __black_Moves_black_Black_lost:
			return stateVector[0] == State.__black_Moves_black_Black_lost;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCIButtons getSCIButtons() {
		return sCIButtons;
	}
	
	public SCIBeeper getSCIBeeper() {
		return sCIBeeper;
	}
	
	public SCIDisplay getSCIDisplay() {
		return sCIDisplay;
	}
	
	private boolean check___white_Moves_white__choice_0_tr0_tr0() {
		return getWhiteTime()>6;
	}
	
	private boolean check___white_Moves_white__choice_0_tr1_tr1() {
		return (getWhiteTime()<=6 && getWhiteTime()>1);
	}
	
	private boolean check___white_Moves_white__choice_0_tr2_tr2() {
		return getWhiteTime()==1;
	}
	
	private boolean check___black_Moves_black__choice_0_tr0_tr0() {
		return getBlackTime()==1;
	}
	
	private boolean check___black_Moves_black__choice_0_tr1_tr1() {
		return (getBlackTime()<=6 && getBlackTime()>1);
	}
	
	private boolean check___black_Moves_black__choice_0_tr2_tr2() {
		return getBlackTime()>6;
	}
	
	private void effect___white_Moves_white__choice_0_tr0() {
		setWhiteTime(getWhiteTime() - 1);
		
		enterSequence___white_Moves_white_White_default();
	}
	
	private void effect___white_Moves_white__choice_0_tr1() {
		setWhiteTime(getWhiteTime() - 1);
		
		sCIBeeper.operationCallback.beep();
		
		enterSequence___white_Moves_white_White_default();
	}
	
	private void effect___white_Moves_white__choice_0_tr2() {
		sCIDisplay.setText("White flag fallen");
		
		setWhiteTime(getWhiteTime() - 1);
		
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		sCIBeeper.operationCallback.beep();
		
		enterSequence___white_Moves_white_White_lost_default();
	}
	
	private void effect___black_Moves_black__choice_0_tr0() {
		sCIDisplay.setText("Black flag fallen");
		
		setBlackTime(getBlackTime() - 1);
		
		sCIDisplay.setBlackDisplay(blackTime);
		
		sCIBeeper.operationCallback.beep();
		
		enterSequence___black_Moves_black_Black_lost_default();
	}
	
	private void effect___black_Moves_black__choice_0_tr1() {
		setBlackTime(getBlackTime() - 1);
		
		sCIBeeper.operationCallback.beep();
		
		enterSequence___black_Moves_black_Black_default();
	}
	
	private void effect___black_Moves_black__choice_0_tr2() {
		setBlackTime(getBlackTime() - 1);
		
		enterSequence___black_Moves_black_Black_default();
	}
	
	/* Entry action for state 'White Begins'. */
	private void entryAction___White_Begins() {
		sCIDisplay.setText(begins);
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'White initial time'. */
	private void entryAction___White_initial_time() {
		sCIDisplay.setText("White initial time");
		
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'Black initial time'. */
	private void entryAction___Black_initial_time() {
		sCIDisplay.setText("Black initial time");
		
		sCIDisplay.setBlackDisplay(blackTime);
		
		sCIDisplay.setWhiteDisplay(-1);
	}
	
	/* Entry action for state 'Increment time'. */
	private void entryAction___Increment_time() {
		sCIDisplay.setText("Increment time");
		
		sCIDisplay.setWhiteDisplay(increment);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'Ready to play'. */
	private void entryAction___Ready_to_play() {
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		sCIDisplay.setBlackDisplay(blackTime);
		
		sCIDisplay.setText("Ready to play");
		
		sCIDisplay.setWhiteDisplay(-1);
		
		sCIDisplay.setBlackDisplay(-1);
	}
	
	/* Entry action for state 'White'. */
	private void entryAction___white_Moves_white_White() {
		timer.setTimer(this, 0, (1 * 1000), true);
		
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		sCIDisplay.setBlackDisplay(blackTime);
	}
	
	/* Entry action for state 'Black'. */
	private void entryAction___black_Moves_black_Black() {
		timer.setTimer(this, 1, (1 * 1000), true);
		
		sCIDisplay.setWhiteDisplay(whiteTime);
		
		sCIDisplay.setBlackDisplay(blackTime);
	}
	
	/* Exit action for state 'White'. */
	private void exitAction___white_Moves_white_White() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Black'. */
	private void exitAction___black_Moves_black_Black() {
		timer.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state White Begins */
	private void enterSequence___White_Begins_default() {
		entryAction___White_Begins();
		nextStateIndex = 0;
		stateVector[0] = State.__White_Begins;
	}
	
	/* 'default' enter sequence for state White initial time */
	private void enterSequence___White_initial_time_default() {
		entryAction___White_initial_time();
		nextStateIndex = 0;
		stateVector[0] = State.__White_initial_time;
	}
	
	/* 'default' enter sequence for state Black initial time */
	private void enterSequence___Black_initial_time_default() {
		entryAction___Black_initial_time();
		nextStateIndex = 0;
		stateVector[0] = State.__Black_initial_time;
	}
	
	/* 'default' enter sequence for state Increment time */
	private void enterSequence___Increment_time_default() {
		entryAction___Increment_time();
		nextStateIndex = 0;
		stateVector[0] = State.__Increment_time;
	}
	
	/* 'default' enter sequence for state Ready to play */
	private void enterSequence___Ready_to_play_default() {
		entryAction___Ready_to_play();
		nextStateIndex = 0;
		stateVector[0] = State.__Ready_to_play;
	}
	
	/* 'default' enter sequence for state white Moves */
	private void enterSequence___white_Moves_default() {
		enterSequence___white_Moves_white_default();
	}
	
	/* 'default' enter sequence for state White */
	private void enterSequence___white_Moves_white_White_default() {
		entryAction___white_Moves_white_White();
		nextStateIndex = 0;
		stateVector[0] = State.__white_Moves_white_White;
	}
	
	/* 'default' enter sequence for state White lost */
	private void enterSequence___white_Moves_white_White_lost_default() {
		nextStateIndex = 0;
		stateVector[0] = State.__white_Moves_white_White_lost;
	}
	
	/* 'default' enter sequence for state black Moves */
	private void enterSequence___black_Moves_default() {
		enterSequence___black_Moves_black_default();
	}
	
	/* 'default' enter sequence for state Black */
	private void enterSequence___black_Moves_black_Black_default() {
		entryAction___black_Moves_black_Black();
		nextStateIndex = 0;
		stateVector[0] = State.__black_Moves_black_Black;
	}
	
	/* 'default' enter sequence for state Black lost */
	private void enterSequence___black_Moves_black_Black_lost_default() {
		nextStateIndex = 0;
		stateVector[0] = State.__black_Moves_black_Black_lost;
	}
	
	/* 'default' enter sequence for region + */
	private void enterSequence___default() {
		react____entry_Default();
	}
	
	/* 'default' enter sequence for region white */
	private void enterSequence___white_Moves_white_default() {
		react___white_Moves_white__entry_Default();
	}
	
	/* 'default' enter sequence for region black */
	private void enterSequence___black_Moves_black_default() {
		react___black_Moves_black__entry_Default();
	}
	
	/* Default exit sequence for state White Begins */
	private void exitSequence___White_Begins() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state White initial time */
	private void exitSequence___White_initial_time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Black initial time */
	private void exitSequence___Black_initial_time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Increment time */
	private void exitSequence___Increment_time() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Ready to play */
	private void exitSequence___Ready_to_play() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state white Moves */
	private void exitSequence___white_Moves() {
		exitSequence___white_Moves_white();
	}
	
	/* Default exit sequence for state White */
	private void exitSequence___white_Moves_white_White() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction___white_Moves_white_White();
	}
	
	/* Default exit sequence for state White lost */
	private void exitSequence___white_Moves_white_White_lost() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state black Moves */
	private void exitSequence___black_Moves() {
		exitSequence___black_Moves_black();
	}
	
	/* Default exit sequence for state Black */
	private void exitSequence___black_Moves_black_Black() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction___black_Moves_black_Black();
	}
	
	/* Default exit sequence for state Black lost */
	private void exitSequence___black_Moves_black_Black_lost() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region + */
	private void exitSequence__() {
		switch (stateVector[0]) {
		case __White_Begins:
			exitSequence___White_Begins();
			break;
		case __White_initial_time:
			exitSequence___White_initial_time();
			break;
		case __Black_initial_time:
			exitSequence___Black_initial_time();
			break;
		case __Increment_time:
			exitSequence___Increment_time();
			break;
		case __Ready_to_play:
			exitSequence___Ready_to_play();
			break;
		case __white_Moves_white_White:
			exitSequence___white_Moves_white_White();
			break;
		case __white_Moves_white_White_lost:
			exitSequence___white_Moves_white_White_lost();
			break;
		case __black_Moves_black_Black:
			exitSequence___black_Moves_black_Black();
			break;
		case __black_Moves_black_Black_lost:
			exitSequence___black_Moves_black_Black_lost();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region white */
	private void exitSequence___white_Moves_white() {
		switch (stateVector[0]) {
		case __white_Moves_white_White:
			exitSequence___white_Moves_white_White();
			break;
		case __white_Moves_white_White_lost:
			exitSequence___white_Moves_white_White_lost();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region black */
	private void exitSequence___black_Moves_black() {
		switch (stateVector[0]) {
		case __black_Moves_black_Black:
			exitSequence___black_Moves_black_Black();
			break;
		case __black_Moves_black_Black_lost:
			exitSequence___black_Moves_black_Black_lost();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react___white_Moves_white__choice_0() {
		if (check___white_Moves_white__choice_0_tr0_tr0()) {
			effect___white_Moves_white__choice_0_tr0();
		} else {
			if (check___white_Moves_white__choice_0_tr1_tr1()) {
				effect___white_Moves_white__choice_0_tr1();
			} else {
				if (check___white_Moves_white__choice_0_tr2_tr2()) {
					effect___white_Moves_white__choice_0_tr2();
				}
			}
		}
	}
	
	/* The reactions of state null. */
	private void react___black_Moves_black__choice_0() {
		if (check___black_Moves_black__choice_0_tr0_tr0()) {
			effect___black_Moves_black__choice_0_tr0();
		} else {
			if (check___black_Moves_black__choice_0_tr1_tr1()) {
				effect___black_Moves_black__choice_0_tr1();
			} else {
				if (check___black_Moves_black__choice_0_tr2_tr2()) {
					effect___black_Moves_black__choice_0_tr2();
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react____entry_Default() {
		enterSequence___Ready_to_play_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react___white_Moves_white__entry_Default() {
		enterSequence___white_Moves_white_White_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react___black_Moves_black__entry_Default() {
		enterSequence___black_Moves_black_Black_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean __White_Begins_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIButtons.modeButton) {
					exitSequence___White_Begins();
					sCIBeeper.operationCallback.beep();
					
					enterSequence___Ready_to_play_default();
				} else {
					if (sCIButtons.whiteButton) {
						exitSequence___White_Begins();
						setBegins("White begins");
						
						setWhiteBegins(true);
						
						enterSequence___White_Begins_default();
					} else {
						if (sCIButtons.blackButton) {
							exitSequence___White_Begins();
							setBegins("Black begins");
							
							setWhiteBegins(false);
							
							enterSequence___White_Begins_default();
						} else {
							if (sCIButtons.startButton) {
								exitSequence___White_Begins();
								setBlackTime(150);
								
								setWhiteTime(150);
								
								setIncrement(10);
								
								setBegins("White begins");
								
								enterSequence___White_Begins_default();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __White_initial_time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIButtons.modeButton) {
					exitSequence___White_initial_time();
					sCIBeeper.operationCallback.beep();
					
					enterSequence___Black_initial_time_default();
				} else {
					if (((sCIButtons.whiteButton) && (getWhiteTime()<=290))) {
						exitSequence___White_initial_time();
						setWhiteTime(getWhiteTime() + 10);
						
						enterSequence___White_initial_time_default();
					} else {
						if (((sCIButtons.blackButton) && (getWhiteTime()>=40))) {
							exitSequence___White_initial_time();
							setWhiteTime(getWhiteTime() - 10);
							
							enterSequence___White_initial_time_default();
						} else {
							if (((sCIButtons.blackButton) && (getWhiteTime()<40))) {
								exitSequence___White_initial_time();
								sCIBeeper.operationCallback.beep();
								
								enterSequence___White_initial_time_default();
							} else {
								if (((sCIButtons.whiteButton) && (getWhiteTime()>290))) {
									exitSequence___White_initial_time();
									sCIBeeper.operationCallback.beep();
									
									enterSequence___White_initial_time_default();
								} else {
									if (sCIButtons.startButton) {
										exitSequence___White_initial_time();
										setBlackTime(150);
										
										setWhiteTime(150);
										
										setIncrement(10);
										
										setBegins("White begins");
										
										enterSequence___White_initial_time_default();
									} else {
										did_transition = false;
									}
								}
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __Black_initial_time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIButtons.modeButton) {
					exitSequence___Black_initial_time();
					sCIBeeper.operationCallback.beep();
					
					enterSequence___Increment_time_default();
				} else {
					if (((sCIButtons.whiteButton) && (getBlackTime()<=290))) {
						exitSequence___Black_initial_time();
						setBlackTime(getBlackTime() + 10);
						
						enterSequence___Black_initial_time_default();
					} else {
						if (((sCIButtons.whiteButton) && (getBlackTime()>290))) {
							exitSequence___Black_initial_time();
							sCIBeeper.operationCallback.beep();
							
							enterSequence___Black_initial_time_default();
						} else {
							if (((sCIButtons.blackButton) && (getBlackTime()<40))) {
								exitSequence___Black_initial_time();
								sCIBeeper.operationCallback.beep();
								
								enterSequence___Black_initial_time_default();
							} else {
								if (((sCIButtons.blackButton) && (getBlackTime()>=40))) {
									exitSequence___Black_initial_time();
									setBlackTime(getBlackTime() - 10);
									
									enterSequence___Black_initial_time_default();
								} else {
									if (sCIButtons.startButton) {
										exitSequence___Black_initial_time();
										setBlackTime(150);
										
										setWhiteTime(150);
										
										setIncrement(10);
										
										setBegins("White begins");
										
										enterSequence___Black_initial_time_default();
									} else {
										did_transition = false;
									}
								}
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __Increment_time_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIButtons.modeButton) {
					exitSequence___Increment_time();
					sCIBeeper.operationCallback.beep();
					
					enterSequence___White_Begins_default();
				} else {
					if (((sCIButtons.whiteButton) && (getIncrement()<30))) {
						exitSequence___Increment_time();
						setIncrement(getIncrement() + 1);
						
						enterSequence___Increment_time_default();
					} else {
						if (((sCIButtons.blackButton) && (getIncrement()>0))) {
							exitSequence___Increment_time();
							setIncrement(getIncrement() - 1);
							
							enterSequence___Increment_time_default();
						} else {
							if (sCIButtons.startButton) {
								exitSequence___Increment_time();
								setBlackTime(150);
								
								setWhiteTime(150);
								
								setIncrement(10);
								
								setBegins("White begins");
								
								enterSequence___Increment_time_default();
							} else {
								if (((sCIButtons.whiteButton) && (getIncrement()>=30))) {
									exitSequence___Increment_time();
									sCIBeeper.operationCallback.beep();
									
									enterSequence___Increment_time_default();
								} else {
									if (((sCIButtons.blackButton) && (getIncrement()<=0))) {
										exitSequence___Increment_time();
										sCIBeeper.operationCallback.beep();
										
										enterSequence___Increment_time_default();
									} else {
										did_transition = false;
									}
								}
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __Ready_to_play_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCIButtons.modeButton) {
					exitSequence___Ready_to_play();
					sCIBeeper.operationCallback.beep();
					
					enterSequence___White_initial_time_default();
				} else {
					if (((sCIButtons.startButton) && (getWhiteBegins()))) {
						exitSequence___Ready_to_play();
						sCIDisplay.setText("White moves");
						
						enterSequence___white_Moves_default();
					} else {
						if (((sCIButtons.startButton) && (!getWhiteBegins()))) {
							exitSequence___Ready_to_play();
							sCIDisplay.setText("Black moves");
							
							enterSequence___black_Moves_default();
						} else {
							did_transition = false;
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __white_Moves_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean __white_Moves_white_White_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (__white_Moves_react(try_transition)==false) {
				if (((sCIButtons.whiteButton) && (getWhiteTime()<(1200 - getIncrement())))) {
					exitSequence___white_Moves();
					sCIBeeper.operationCallback.beep();
					
					setWhiteTime(getWhiteTime() + increment);
					
					sCIDisplay.setText("Black moves");
					
					enterSequence___black_Moves_default();
				} else {
					if (((sCIButtons.whiteButton) && (getWhiteTime()>=(1200 - getIncrement())))) {
						exitSequence___white_Moves();
						sCIBeeper.operationCallback.beep();
						
						setWhiteTime(1200);
						
						sCIDisplay.setText("Black moves");
						
						enterSequence___black_Moves_default();
					} else {
						if (sCIButtons.startButton) {
							exitSequence___white_Moves();
							setBlackTime(150);
							
							setWhiteTime(150);
							
							setIncrement(10);
							
							setBegins("White begins");
							
							enterSequence___Ready_to_play_default();
						} else {
							if (timeEvents[0]) {
								exitSequence___white_Moves_white_White();
								react___white_Moves_white__choice_0();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __white_Moves_white_White_lost_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (__white_Moves_react(try_transition)==false) {
				if (sCIButtons.startButton) {
					exitSequence___white_Moves();
					setBlackTime(150);
					
					setWhiteTime(150);
					
					setIncrement(10);
					
					setBegins("White begins");
					
					enterSequence___Ready_to_play_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean __black_Moves_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean __black_Moves_black_Black_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (__black_Moves_react(try_transition)==false) {
				if (((sCIButtons.blackButton) && (getBlackTime()<(1200 - getIncrement())))) {
					exitSequence___black_Moves();
					sCIBeeper.operationCallback.beep();
					
					setBlackTime(getBlackTime() + increment);
					
					sCIDisplay.setText("White moves");
					
					enterSequence___white_Moves_default();
				} else {
					if (((sCIButtons.blackButton) && (getBlackTime()>=(1200 - getIncrement())))) {
						exitSequence___black_Moves();
						sCIBeeper.operationCallback.beep();
						
						setBlackTime(1200);
						
						sCIDisplay.setText("White moves");
						
						enterSequence___white_Moves_default();
					} else {
						if (sCIButtons.startButton) {
							exitSequence___black_Moves();
							setBlackTime(150);
							
							setWhiteTime(150);
							
							setIncrement(10);
							
							setBegins("White begins");
							
							enterSequence___Ready_to_play_default();
						} else {
							if (timeEvents[1]) {
								exitSequence___black_Moves_black_Black();
								react___black_Moves_black__choice_0();
							} else {
								did_transition = false;
							}
						}
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean __black_Moves_black_Black_lost_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (__black_Moves_react(try_transition)==false) {
				if (sCIButtons.startButton) {
					exitSequence___black_Moves();
					setBlackTime(150);
					
					setWhiteTime(150);
					
					setIncrement(10);
					
					setBegins("White begins");
					
					enterSequence___Ready_to_play_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
}
